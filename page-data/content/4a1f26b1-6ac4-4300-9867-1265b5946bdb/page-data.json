{"componentChunkName":"component---src-templates-article-js","path":"/content/4a1f26b1-6ac4-4300-9867-1265b5946bdb","result":{"data":{"content":{"contentId":"4a1f26b1-6ac4-4300-9867-1265b5946bdb","title":"How I recovered my newsletter subscriptions","author":{"name":"alex"},"topics":[{"topicId":"4d3c5a72-8bf0-5cf4-90f4-07943021e425","topic":"email","slug":"/topic/email"},{"topicId":"92f7873f-634d-52a0-934a-8f3db7282114","topic":"gmail","slug":"/topic/gmail"},{"topicId":"744082b6-01e3-5414-86ca-451b3138abb8","topic":"newsletters","slug":"/topic/newsletters"},{"topicId":"1302baa6-2d01-58fb-9551-371c4f9f9d82","topic":"standards","slug":"/topic/standards"},{"topicId":"18be8485-5a6e-5b50-b3bc-9c7294331955","topic":"javascript","slug":"/topic/javascript"},{"topicId":"7a6b4d73-738a-5059-952e-17ce7f29f577","topic":"technical-architecture","slug":"/topic/technical-architecture"}],"date":"Sun Nov 13 2022 18:33:24 GMT+0000 (Coordinated Universal Time)","image":{"image":null,"credit":null},"content":{"html":"<p>How many Substack accounts do you have?  Or rather, how many email addresses do you have?  This is the story of how collecting a few of both surprised me, how I recovered and how you can too.</p>\n<blockquote>\n<p>Disclaimer: Substack is not at fault here, this was entirely my own doing!</p>\n</blockquote>\n<h2>Summary</h2>\n<ol>\n<li>Substack implements <a href=\"https://www.ietf.org/rfc/rfc2919.txt\">RFC-2919</a> allowing us to programmatically get every list we've ever been subscribed to as <code class=\"language-text\">List-Id</code> in any mail client.  Standards are <em>fantastic</em>.</li>\n<li>With Gmail's search or API, we can retrieve emails from Substack using <code class=\"language-text\">from:substack.com</code>.  And, to filter by payment receipts: <code class=\"language-text\">subject:\"your payment receipt\" from:substack.com</code>.  Using Google Apps Script we can programmatically aggregate these messages into a handy list, <a href=\"https://script.google.com/d/1SbHnmBnbn_MJohHDoV0DIGNpa4PDTIiidBBg0BQIY8Jn9MhnPK7GRC0X/edit\">like this</a>.</li>\n<li>Newsletters being emails made it easy to retrieve this information, but, by backing this data up sooner I could have avoided the trouble altogether.</li>\n</ol>\n<h2>How I messed up</h2>\n<p>Over the years I've used a few different email addresses.  With newsletters growing in popularity and so many being sent via Substack, that <em>also</em> meant I'd collected several Substack accounts.  Thankfully <a href=\"https://support.substack.com/hc/en-us/articles/360037489072-How-do-I-change-my-email-address-\">it's easy to merge these accounts</a>.</p>\n<p>While evaluating alternatives to <a href=\"https://www.getrevue.co/\">Reveue</a> <em>(for no reason whatsoever üòá)</em>, I misread Substack's onboarding flow and believing that I'd created another duplicate account, <a href=\"https://support.substack.com/hc/en-us/articles/360060692511-How-do-I-delete-my-Substack-account-\">hit delete</a>.</p>\n<p>Moments later, I realised that I'd deleted my primary account.  Whoops!</p>\n<p>The <strong>good</strong> news: The deletion process is good.  My account was gone <em>immediately</em>.  Many companies <a href=\"https://justdeleteme.xyz/\">make it difficult to leave</a> so this was genuinely a welcome surprise.  Excellent compliance work folks!</p>\n<p>The <strong>bad</strong> news: The deletion process is <em>too</em> good.  I didn't receive a single message from the many newsletters I'd been unsubscribed from.  Oh no!</p>\n<p>Some newsletters are regular and predictable, but many are not.  These are the ones where you get the odd valuable unique insight or a punchy soundbite.  The few I might not know I missed, but, would miss the most.</p>\n<p>So: How do I find and recover all these newsletters that I've previously signed up for?</p>\n<h2>Email inboxes are just big log-files</h2>\n<p>The nice thing about newsletters is that they're ‚Äújust‚Äù emails.  And the nice thing about emails is that they're ‚Äújust‚Äù files.  <em>Specifically</em>, they are log files, or, a series of mails recorded in a standardised format.</p>\n<blockquote>\n<p>This is a slight oversimplification, because in reality emails can be stored in nearly any way, but the conceptual model still works.</p>\n</blockquote>\n<p>What this means is that it's possible to scan over all of these mails to reconstruct my history and to derive a list of the newsletters I read.  <em>Sweet</em>.</p>\n<p>Let's go about solving this problem like this:</p>\n<ol>\n<li>Find all mails sent from Subtack.com.</li>\n<li>Identify which newsletter they are from.</li>\n<li>Put those into a list.</li>\n<li>Optionally, group by the email address they were sent to.</li>\n</ol>\n<p>Okay, from a busy inbox, how do we do that?</p>\n<h2>What do the standards say?</h2>\n<p>This post isn't about the history of email - there's a fascinating series of IETF RFCs which build up the format we know today.</p>\n<p>The first standard which will help today is <a href=\"https://www.ietf.org/rfc/rfc822.txt\">RFC-822</a>, the standard for the format of ARPA Internet Text Messages.</p>\n<p>Section 1.2 introduces headers and section 3, describes their format.  In short, email headers are bits of data about the email and are sent at the start of a message before the main content.  They look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Subject: This is a subject\nContent-Type: text/plain</code></pre></div>\n<p>Which in this case says that the email's subject is \"This is a subject\" and that it's plain text.  This format is relatively easy for a computer to read.</p>\n<p>The next two standards that can help today are extensions specifically for mailing lists, specifically <a href=\"https://www.ietf.org/rfc/rfc2369.txt\">RFC-2369</a> and <a href=\"https://www.ietf.org/rfc/rfc2919.txt\">RFC-2919</a> which introduce a series of list-specific metadata.  These look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">List-Owner: &lt;mailto:example@example.org>\nList-Unsubscribe: &lt;https://example.org/unsubscribe>\nList-Id: &lt;some-id></code></pre></div>\n<p>Cool!  So maybe we can aggregate those List IDs?</p>\n<h2>Enter: Gmail and Apps Script</h2>\n<p>If I were dealing with a mail spool on a Linux machine, this might be a bit easier, because these fields are very <code class=\"language-text\">grep</code>-able.</p>\n<p>e.g. <code class=\"language-text\">grep --only-matching 'List-Id:' | sort --unique</code></p>\n<p>In practice, most of us are using webmail services and don't have direct access to¬†the mail-box (although could download them over IMAP).  They <em>do</em> offer APIs.  And Gmail, which I use, comes with a handy scripting engine called <a href=\"https://www.google.com/script/start/\">Apps Script</a>.</p>\n<p>Apps Script is great.  I've used it in Google Sheets to get Jira ticket descriptions and in Google Docs to create meeting agendas automatically.  It comes with a bunch of Google API integrations, including the <a href=\"https://developers.google.com/apps-script/reference/gmail\">Gmail Service</a> which is one-click access to most Gmail operations.</p>\n<p>Our first task is iterating over all emails from Substack.  The filter <code class=\"language-text\">from:substack.com</code> should do that for us, which looks something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> threads <span class=\"token operator\">=</span> GmailApp<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"from:substack.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>threads<span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>This is asynchronous code which is executing synchronously.  Apps Script is a bit weird like that.  For today's purposes it makes things much simpler.</p>\n</blockquote>\n<p>Okay, we now have a list of <a href=\"https://developers.google.com/apps-script/reference/gmail/gmail-thread\">Threads</a>.   Threads don't include much information about the messages, so our next step is to retrieve the <a href=\"https://developers.google.com/apps-script/reference/gmail/gmail-message\">Messages</a> and read their <code class=\"language-text\">List-ID</code> headers.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Find last 50 emails from Substack.</span>\n<span class=\"token keyword\">const</span> threads <span class=\"token operator\">=</span> GmailApp<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"from:substack.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> thread <span class=\"token keyword\">of</span> threads<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token comment\">// Log the list ID of the first message in each thread.</span>\n\t<span class=\"token keyword\">const</span> messages <span class=\"token operator\">=</span> thread<span class=\"token punctuation\">.</span><span class=\"token function\">getMessages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>messages<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> listId <span class=\"token operator\">=</span> messages<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'List-ID'</span><span class=\"token punctuation\">)</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>listId<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Excellent, now we're getting somewhere.  We have list IDs for newsletters.  Our next step is to iterate over all emails, storing unique list IDs only.  We can use a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a> for these, which only hold unique values.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> lists <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Find last 50 emails from Substack.</span>\n<span class=\"token keyword\">const</span> threads <span class=\"token operator\">=</span> GmailApp<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"from:substack.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> thread <span class=\"token keyword\">of</span> threads<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token comment\">// Retrieve list ID of the first message in each thread.</span>\n\t<span class=\"token keyword\">const</span> messages <span class=\"token operator\">=</span> thread<span class=\"token punctuation\">.</span><span class=\"token function\">getMessages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>messages<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> listId <span class=\"token operator\">=</span> messages<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'List-ID'</span><span class=\"token punctuation\">)</span>\n\t\t\n\t\t<span class=\"token comment\">// Store the list ID if it's unique.</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>lists<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>listId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tlists<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>listId<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Log the unique list IDs.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>lists<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We now have a list of the unique lists we have at some point been subscribed to, excellent!</p>\n<p>With a bit of refactoring, we can group this by email - I have done this and you can see the code further down so won't cover it here.</p>\n<h2>Show me the code!  And how do I run this?</h2>\n<p><strong>Excellent question and the answer to both questions is here: <a href=\"https://script.google.com/d/1SbHnmBnbn_MJohHDoV0DIGNpa4PDTIiidBBg0BQIY8Jn9MhnPK7GRC0X/edit\">What are my Substack subscriptions?</a></strong></p>\n<p>In this example, I've implemented pagination using a Generator (Apps Script makes <a href=\"https://javascript.info/async-iterators-generators\">AsyncIterables</a> very easy!)</p>\n<p>This example also uses a non-standard field <code class=\"language-text\">List-URL</code> which works for Substack and is a more human-friendly.  It also groups by <code class=\"language-text\">Delivered-To</code> email address making it easier to find duplicates.</p>\n<p>Instead of logging the result, this sends you an email using the <a href=\"https://developers.google.com/apps-script/reference/gmail/gmail-app#sendEmail(String,String,String,Object)\">sendEmail</a> method.</p>\n<h2>The manual bit</h2>\n<p>Unfortunately, Substack doesn't offer an API, so after getting a full list of which newsletters I'd previously been subscribed to, I couldn't automatically re-subscribe.  So I did a bit of clicking of links, which seemed like a fair compromise considering that I got into this fix by doing a bit of clicking on links.</p>\n<p>Annoyingly some subscriptions were ones I'd paid for and Substack doesn't have a way to automatically resume or refund these.  <a href=\"https://support.substack.com/hc/en-us/articles/360059896552-How-do-I-cancel-a-subscription-and-issue-a-refund-for-a-paid-subscriber-\">They recommend speaking to support</a>, so armed with a similarly-obtained list of the paid-for subscriptions, I've done just that.</p>\n<p>You can get those using this query: <code class=\"language-text\">subject:\"Your payment receipt\" from:substack.com</code></p>\n<h2>Takeaways</h2>\n<h3>1. Always bet on Email</h3>\n<p>Email has fallen in popularity, even as newsletters have surged, and until today I actually wished that more of these newsletters were RSS feeds instead.</p>\n<p>But it's actually very handy being able to find conversations, receipts, notifications, news and so much more in one place.  And this kind of recovery would not be possible without that history.</p>\n<p>Email clients are ubiquitous and work on nearly every platform.  It's genuinely quite hard to beat the reliability of email.</p>\n<h3>2. Standards are dope. Why don't we use more of them?</h3>\n<p>If you're building a platform doing something like sending out newsletters today, try and include their guidance.</p>\n<p>After recovering my Substack subscriptions I had a look at some other newsletter providers I'm subscribed through and the presence of mailing-list headers in their messages was spotty at best.</p>\n<p>It's not only email: For example on the web, we frequently see people re-inventing their own behaviour, especially around how content is made accessible or how page navigation works, even though browsers do both better.  I've definitely done this in the past.  We can do better.</p>\n<h3>3. Export your data and keep fewer accounts</h3>\n<p>Most platforms offer some form of data export.  Take advantage of it - because it's always nice to have a backup!</p>\n<p>Also, by avoiding keeping many digital accounts you'll be far less likely to run into problems like these.  You will also reduce your risk of data theft or leaks.</p>\n<p>...</p>\n<p>This journey has been a slightly unwelcome-yet-fun distraction, but I hope if not helpful that it's at least mildly interesting.  Feedback is¬†welcome - thanks for reading!</p>","excerpt":"How many Substack accounts do you have?  Or rather, how many email addresses do you have?  This is the story of how collecting a few of both‚Ä¶"},"slug":"/content/4a1f26b1-6ac4-4300-9867-1265b5946bdb"},"site":{"siteMetadata":{"siteUrl":"https://alexwilson.tech"}}},"pageContext":{"contentId":"4a1f26b1-6ac4-4300-9867-1265b5946bdb"}},"staticQueryHashes":["63159454","955950066"],"slicesMap":{}}