{"componentChunkName":"component---src-templates-article-js","path":"/content/717e6a35-1cb5-4a28-9321-592d05ddd9dc/","result":{"data":{"content":{"contentId":"717e6a35-1cb5-4a28-9321-592d05ddd9dc","title":"Deploying static sites with Github Actions","author":{"name":"alex"},"topics":[{"topicId":"12eed7be-07ac-5b71-9d27-193de8a0f27e","topic":"devops","slug":"/topic/devops"},{"topicId":"951a84e8-f923-539f-bdf8-5d512aef9541","topic":"static-site","slug":"/topic/static-site"},{"topicId":"2fdc8f61-1353-59b1-b719-e26b8649cc8e","topic":"github","slug":"/topic/github"},{"topicId":"dfd8baad-2505-56f6-bbd5-b61b3b6b58e0","topic":"release-engineering","slug":"/topic/release-engineering"}],"date":"Wed Jan 15 2020 00:00:00 GMT+0000 (Coordinated Universal Time)","image":{"image":null,"credit":null},"content":{"html":"<p>First, some background:</p>\n<p>Github Pages is a brilliant way to build static websites quickly and easily. However it is quite\nlimited as it only runs Jekyll, which is in safe mode â€” meaning only template customisations were\npossible.  Last year after growing frustrated with hacking together template-driven functionality\nlike RSS feeds and article recommendations, I replatformed to Gatsby.</p>\n<p>Porting was relatively straightforward and has brought a swathe of benefits including pluggable APIs\nand the ability to write unit tests, but it also introduced a new problem: I didn't have a way of\ndeploying the site.</p>\n<p>Exploring my options, pairing Github Actions (to build) with Github Pages (to host) seemed rather\nattractive as:</p>\n<ul>\n<li>Actions have tight integration with Github allowing me to keep my workflows in one place. Other\nCI/CD offerings added extra overhead.</li>\n<li>Actions seemed customisable enough to implement Github Pages again with minimal overhead.</li>\n<li>If anything happens to Actions or Pages, both are simple enough that migrating to something else\nis realistic.</li>\n</ul>\n<p>These all proved to be true, and I was able to quickly put together something quite usable.\nA few months of small tweaks and one refactor later, I am happy enough to talk about what I did.</p>\n<h2>Building a workflow in Github Actions</h2>\n<p>Github Actions is still relatively new so there's not a lot of documentation out there.</p>\n<p>In order to start with writing a Github Actions script, there are three things we need to know.</p>\n<ol>\n<li>What it is called, with the <code class=\"language-text\">name</code> key.</li>\n<li>When to run this action, with the <code class=\"language-text\">on</code> key.</li>\n<li>What it will do, with the <code class=\"language-text\">jobs</code> key.</li>\n</ol>\n<p>Starting with the simplest, the name, I called my workflow \"Build, Test and Deploy\".</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build<span class=\"token punctuation\">,</span> Test and Deploy</code></pre></div>\n<p>Next, I wanted this to run for all branches.  An important note is that <strong>Github Actions will not\ntrigger for pushes that it performs</strong>, so while I have excluded the <code class=\"language-text\">gh-pages</code> branch here, this\nwas more for readability than to prevent unexpected behaviour.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">'!gh-pages'</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">'*'</span></code></pre></div>\n<p>Lastly, we can start defining some jobs. Each has a unique ID which is also its key in the jobs block,\nand a <code class=\"language-text\">name</code> key which is used the UI.</p>\n<p>I kept this simple, and required each step to wait for the previous one to succeed with the <code class=\"language-text\">needs</code> key.\nWe can choose a task-runner using the <code class=\"language-text\">runs-on</code> key, I opted for <code class=\"language-text\">ubuntu-latest</code> for simplicity.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n  <span class=\"token key atrule\">test</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Test\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">needs</span><span class=\"token punctuation\">:</span> build\n  <span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">needs</span><span class=\"token punctuation\">:</span> deploy</code></pre></div>\n<p>Putting this all together, we now have a skeleton workflow which we can customise to our needs. Here\nI've also added a checkout step to the <code class=\"language-text\">build</code> job.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build<span class=\"token punctuation\">,</span> Test and Deploy\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">'!gh-pages'</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">'*'</span>\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout Code\n      <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@master\n  <span class=\"token key atrule\">test</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Test\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">needs</span><span class=\"token punctuation\">:</span> build\n  <span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">needs</span><span class=\"token punctuation\">:</span> deploy</code></pre></div>\n<h2>Building</h2>\n<p>Focusing specifically on the <code class=\"language-text\">build</code> job, we can now add a few steps to perform the\nbuild process, so that we can later on test it and deploy it.\nOur input is our source-code and our output is a build artifact.</p>\n<p>I've commented inline.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token comment\"># Firstly, let's check-out our code.</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout Code\n      <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@master\n\n    <span class=\"token comment\"># Now let's configure this environment to support NodeJS tooling.</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>node@master\n\n    <span class=\"token comment\"># Now run an npm install...</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Install Dependencies\n      <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> npm install\n\n    <span class=\"token comment\"># Run the build-script, which is a package.json script in this case.</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build\n      <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> npm run build\n      <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">CI</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># This is done to prevent output being too verbose.</span>\n\n    <span class=\"token comment\"># Use Github's upload-artifact action to upload our hopefully-successful build!</span>\n    <span class=\"token comment\"># We only want the `public` folder here which contains our (optimised) static site.</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Save Build Artifact\n      <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/upload<span class=\"token punctuation\">-</span>artifact@v1\n      <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> site<span class=\"token punctuation\">-</span>artifact <span class=\"token comment\"># A unique key (and name) for the artifact in question.</span>\n        <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> public        <span class=\"token comment\"># This is what we'd like to keep, we want `public` but any file/folder works.</span></code></pre></div>\n<p>Awesome! Now we have a workflow which builds and saves an artifact, which is actually downloadable\nfrom the Github UI.</p>\n<h2>Testing</h2>\n<p>Now that the site is being built, let's add a few steps to the test workflow to run some tests.\nOur input is our source code, our build artifact. We don't return anything, but we do throw an error\nif any tests fail.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">  <span class=\"token key atrule\">test</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Test\n    <span class=\"token key atrule\">needs</span><span class=\"token punctuation\">:</span> build\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token comment\"># Again, we check-out our code.</span>\n    <span class=\"token comment\"># This is needed as we will be executing tests which are outside of the artifact.</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout\n      <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@master\n\n    <span class=\"token comment\"># Next up, we download the pre-built artifact.</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Download Website Artifact\n      <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/download<span class=\"token punctuation\">-</span>artifact@v1\n      <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> site<span class=\"token punctuation\">-</span>artifact <span class=\"token comment\"># We reference the original artifact name.</span>\n        <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> public        <span class=\"token comment\"># and instruct that the artifact is restored to the `public` folder.</span>\n\n    <span class=\"token comment\"># Configure node and reinstall dependencies (each task has a unique workspace!)</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>node@master\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Install Dependencies\n      <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> npm install\n\n    <span class=\"token comment\"># Finally run our tests. The output can be tweaked so Github Actions better understands it.</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Run Tests\n      <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> npm test</code></pre></div>\n<p>This can absolutely be done inside the build step to save time â€”Â I kept them separate to enable\nadding end-to-end tests and a few other tools which are irrelevant to the actual build process.</p>\n<h2>Deploying</h2>\n<p>Now that we've built and tested an artifact, we're finally ready to deploy it. This time things are\na little bit trickier, and we're going to break out into a custom action.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">  <span class=\"token comment\"># Deploy to Github Pages environment</span>\n  <span class=\"token key atrule\">deploy-production</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy to Production\n    <span class=\"token key atrule\">needs</span><span class=\"token punctuation\">:</span> test\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n\n    <span class=\"token comment\"># I've added this extra step, so that this task *only* runs on the master branch.</span>\n    <span class=\"token comment\"># This syntax is quite expressive and allows for much richer conditions.</span>\n    <span class=\"token key atrule\">if</span><span class=\"token punctuation\">:</span> github.ref == 'refs/heads/master'\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token comment\"># Again we check-out.  This time as we'll be referencing a custom action!</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout\n      <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@master\n\n    <span class=\"token comment\"># And again, we download the website artifact. This time so we can deploy it!</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Download Website Artifact\n      <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/download<span class=\"token punctuation\">-</span>artifact@v1\n      <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> site<span class=\"token punctuation\">-</span>artifact\n        <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> public\n\n    <span class=\"token comment\"># A custom action!  I'll explain a bit more about this below.</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy to Github Pages\n      <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> ./.github/actions/github<span class=\"token punctuation\">-</span>pages/\n      <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">GITHUB_TOKEN</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.GITHUB_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">args</span><span class=\"token punctuation\">:</span> public</code></pre></div>\n<p>So now let's look at how we can push to the Github Pages branch of this current repository</p>\n<p>This operation takes place primarily in Git, and luckily we have enough information available to us\nto be able to find and push to Github's HTTP Git endpoint. As we're deploying an artifact each time\nwe don't have access to the existing Git history, so let's go ahead and create a new repository and\npush it every time.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/sh</span>\n<span class=\"token builtin class-name\">set</span> <span class=\"token parameter variable\">-e</span>\n\n<span class=\"token comment\"># Here we take an argument to choose which folder we release.</span>\n<span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$*</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Deploying <span class=\"token variable\">${GITHUB_SHA}</span> to GitHub Pages\"</span>\n<span class=\"token assign-left variable\">REPOSITORY</span><span class=\"token operator\">=</span><span class=\"token string\">\"https://x-access-token:<span class=\"token variable\">${GITHUB_TOKEN}</span>@github.com/<span class=\"token variable\">${GITHUB_REPOSITORY}</span>.git\"</span>\n\n<span class=\"token comment\">## Create a new repository and reference this one, with an HTTP token.</span>\n<span class=\"token function\">git</span> init\n<span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin <span class=\"token variable\">$REPOSITORY</span>\n\n<span class=\"token comment\">## Checkout the gh-pages branch, and reset to the latest version.</span>\n<span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> gh-pages\n\n<span class=\"token comment\">## Configure Git to perform the commit as the user who triggered this action.</span>\n<span class=\"token comment\">## If the build wasn't triggered by a human this will be the person who last committed to the branch</span>\n<span class=\"token function\">git</span> config user.name <span class=\"token string\">\"<span class=\"token variable\">${GITHUB_ACTOR}</span>\"</span>\n<span class=\"token function\">git</span> config user.email <span class=\"token string\">\"<span class=\"token variable\">${GITHUB_ACTOR}</span>@users.noreply.github.com\"</span>\n\n<span class=\"token comment\">## Finally, add the contents of our script</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Deploying <span class=\"token variable\">${GITHUB_SHA}</span> to Github Pages\"</span>\n\n<span class=\"token comment\">## And force push to the gh-pages branch so Github Pages can serve it!</span>\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">--force</span> origin gh-pages:gh-pages\n<span class=\"token function\">rm</span> <span class=\"token parameter variable\">-fr</span> .git\n<span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$GITHUB_WORKSPACE</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Successfully deployed.\"</span></code></pre></div>\n<p>Lastly, to be able to use this custom shell script we wrap it in a basic Dockerfile including Git\nand minimal boilerplate to make it usable as a custom action.</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token comment\"># We use the alpine git image as it's the smallest for what we need.</span>\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> alpine/git:latest</span>\n\n<span class=\"token comment\"># Github actions use a few Docker labels for interacting with custom actions.</span>\n<span class=\"token instruction\"><span class=\"token keyword\">LABEL</span> <span class=\"token string\">\"maintainer\"</span>=<span class=\"token string\">\"Alex Wilson &lt;alex@alexwilson.tech>\"</span></span>\n<span class=\"token instruction\"><span class=\"token keyword\">LABEL</span> <span class=\"token string\">\"com.github.actions.name\"</span>=<span class=\"token string\">\"GitHub Pages Deploy\"</span></span>\n<span class=\"token instruction\"><span class=\"token keyword\">LABEL</span> <span class=\"token string\">\"com.github.actions.description\"</span>=<span class=\"token string\">\"Deploy to GitHub Pages.\"</span></span>\n<span class=\"token instruction\"><span class=\"token keyword\">LABEL</span> <span class=\"token string\">\"com.github.actions.icon\"</span>=<span class=\"token string\">\"upload-cloud\"</span></span>\n<span class=\"token instruction\"><span class=\"token keyword\">LABEL</span> <span class=\"token string\">\"com.github.actions.color\"</span>=<span class=\"token string\">\"blue\"</span></span>\n\n<span class=\"token comment\"># The most important bit other than the parent image is this: We add the below script</span>\n<span class=\"token comment\"># to actually do the Github Pages deploy step and make it the entrypoint.</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ADD</span> entrypoint.sh /entrypoint.sh</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ENTRYPOINT</span> [<span class=\"token string\">\"/entrypoint.sh\"</span>]</span></code></pre></div>\n<h2>Deploying - Letting Github Pages know</h2>\n<p>Well, unfortunately that wasn't enough.  Even though we've pushed to the <code class=\"language-text\">gh-pages</code> branch, Github\nwon't do anything because we <em>pushed</em> this using Github Actions.  Remember that I said that Actions\nwon't trigger itself to prevent a circular dependency?  Well this is <em>that</em> protection in action.</p>\n<p>Thankfully, we can mitigate this by using the Github Pages API.  We use it to queue another Pages\nbuild as our final deployment step.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Trigger a Pages Update\n      <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n        curl -sS -X POST -H \"Authorization: Bearer ${{ secrets.GITHUB_PAGES_DEPLOY_TOKEN }}\" \\\n        https://api.github.com/repos/${{ github.repository }}/pages/builds \\</span></code></pre></div>\n<p>There is a new prerequisite - we now need to add the <code class=\"language-text\">GITHUB_PAGES_DEPLOY_TOKEN</code> environment variable,\nwith a new Personal Access Token which has Repository scopes.</p>\n<h2>Optimising the whole thing</h2>\n<p>You may have noticed that we're repeatedly reinstalling dependencies which is a little bit wasteful.\nThankfully, as well as artifact support, Github Actions also offer us a caching mechanism which we can\nto speed this up.</p>\n<p>It's important to mention that Github only keeps the cache alive for a maximum of 7 days since the last\nbuild, but if you build at least a week this won't be an issue.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>node@master\n\n    <span class=\"token comment\"># Store NPM's global cache, using the package-lock.json our cache key.</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Restore NPM Cache\n      <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/cache@v1\n      <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> cache<span class=\"token punctuation\">-</span>npm\n      <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> ~/.npm\n        <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> npm<span class=\"token punctuation\">-</span>$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> hashFiles('<span class=\"token important\">**/package-lock.json')</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\"># And the same for node_modules, using the package-lock.json our cache key.</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Restore node_modules\n      <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/cache@v1\n      <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> cache<span class=\"token punctuation\">-</span>node_modules\n      <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> node_modules\n        <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> node_modules<span class=\"token punctuation\">-</span>$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> hashFiles('<span class=\"token important\">**/package-lock.json')</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>We're also able to tweak the <code class=\"language-text\">checkout</code> step to speed it up a bit, by adding the shallow clone directive.\nAfter-all, we are not interacting with the project history here â€” we're only building it.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout\n      <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@master\n      <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">fetch-depth</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></code></pre></div>\n<h2>Adding history and rollbacks</h2>\n<p>A nice benefit of using this workflow on Github Pages is that we're also creating an artifact ins Git\nitself which makes rolling back a standard git operation, something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"command-line-prompt\"><span data-user=alex data-host=localhost></span><span data-user=alex data-host=localhost></span><span data-user=alex data-host=localhost></span><span data-user=alex data-host=localhost></span></span><span class=\"token function\">git</span> fetch origin\n<span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-t</span> origin/gh-pages\n<span class=\"token function\">git</span> reset <span class=\"token operator\">&lt;</span>commit-id<span class=\"token operator\">></span>\n<span class=\"token function\">git</span> push gh-pages <span class=\"token parameter variable\">--force</span></code></pre></div>\n<p>One problem: We currently overwrite our history so we can't revert.</p>\n<p>To try and remedy this I made a small adjustment:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">## We still checkout the gh-pages branch</span>\n<span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> gh-pages\n\n<span class=\"token comment\"># But this time, we fetch the existing one</span>\n<span class=\"token function\">git</span> fetch origin gh-pages\n\n<span class=\"token comment\"># And soft reset to its latest commit to avoid any conflicts.</span>\n<span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--soft</span> origin/gh-pages</code></pre></div>\n<h2>Wrapping up</h2>\n<p>This workflow has been fantastic for me and I've been able to focus on making site adjustments\nwithout constantly having to repair a build process.</p>\n<p><a href=\"https://github.com/alexwilson/personal-website/blob/master/.github/workflows/build-test-deploy.yml\">You can see the entire, finished workflow here</a> and <a href=\"https://github.com/alexwilson/personal-website/tree/master/.github/actions/github-pages\">the custom action here</a>.</p>\n<p>As well as Actions I have now added a few bots, a scheduled build (to detect problems) and Slack\nnotifications, all of which let me keep up-to-date with the fast-moving world of node dependencies\nwithout incurring side-project fatigue.</p>\n<p>Next up I'll be looking at creative ways of improving the writing workflow (spellcheck and editor\nexperience).</p>","excerpt":"First, some background: Github Pages is a brilliant way to build static websites quickly and easily. However it is quite\nlimited as it onlyâ€¦"},"slug":"/content/717e6a35-1cb5-4a28-9321-592d05ddd9dc","deprecatedFields":{"legacySlugs":["/blog/2020/01/15/deploying-static-sites-with-github-actions/"]}},"site":{"siteMetadata":{"siteUrl":"https://alexwilson.tech"}}},"pageContext":{"contentId":"717e6a35-1cb5-4a28-9321-592d05ddd9dc"}},"staticQueryHashes":["2931102475","63159454"],"slicesMap":{}}